// Settings content loader for Decap CMS integration

// Default metadata settings
const defaultMetadataSettings = {
  site: {
    title: "Coffee & Tea Menu",
    description: "–õ—É—á—à–∏–π –∫–æ—Ñ–µ, —á–∞–π –∏ –º–∞—Ç—á–∞ –≤ –≥–æ—Ä–æ–¥–µ. –°–≤–µ–∂–µ–æ–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –∑–µ—Ä–Ω–∞, –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.",
    keywords: ["–∫–æ—Ñ–µ", "—á–∞–π", "–º–∞—Ç—á–∞", "–∫–∞—Ñ–µ", "–ë–∏—à–∫–µ–∫"],
    url: "https://your-coffee-site.com",
    image: ""
  },
  openGraph: {
    title: "",
    description: "",
    image: "",
    type: "website" as const
  },
  twitter: {
    title: "",
    description: "",
    image: "",
    card: "summary_large_image" as const,
    site: ""
  }
};

// Default settings as fallback
const defaultGeneralSettings = {
  siteName: "‚òï –ö–æ—Ñ–µ –∏ –ß–∞–π",
  hours: {
    weekdays: "08:00 - 22:00",
    weekend: "09:00 - 23:00"
  },
  contact: {
    phone: "+996 XXX XXX XXX",
    address: "–≥. –ë–∏—à–∫–µ–∫, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123",
    instagram: "@coffee_tea_kg"
  }
};

const defaultPageSettings = {
  home: {
    heroTitle: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –º–∏—Ä",
    heroSubtitle: "–õ—É—á—à–∏–π –∫–æ—Ñ–µ, —á–∞–π –∏ –º–∞—Ç—á–∞ –≤ –≥–æ—Ä–æ–¥–µ",
    menuButtonText: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é",
    promotionsSection: {
      title: "üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏",
      description: "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à–∏ –Ω–æ–≤–∏–Ω–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏!",
      buttonText: "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏"
    }
  },
  menu: {
    pageTitle: "–ù–∞—à–µ –º–µ–Ω—é",
    categories: [
      { name: "coffee", title: "–ö–û–§–ï", icon: "‚òï" },
      { name: "tea", title: "–ß–ê–ô", icon: "üçµ" },
      { name: "matcha", title: "–ú–ê–¢–ß–ê –õ–ê–¢–¢–ï", icon: "üçÉ" }
    ]
  },
  promotions: {
    pageTitle: "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏",
    description: "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏"
  },
  ui: {
    loading: "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...",
    notFound: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
    unavailable: "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    available: "–í –Ω–∞–ª–∏—á–∏–∏",
    outOfStock: "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
    backToMenu: "‚Üê –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
    noPriceText: "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
    newItemBadge: "–ù–æ–≤–∏–Ω–∫–∞"
  }
};

export async function loadGeneralSettings() {
  try {
    // Try to load from CMS content using dynamic import
    const response = await fetch('/content/settings/general.json');
    if (response.ok) {
      const generalSettings = await response.json();
      return { ...defaultGeneralSettings, ...generalSettings };
    } else {
      throw new Error('Failed to fetch general settings');
    }
  } catch (error) {
    console.warn('Could not load general settings from CMS, using defaults:', error);
    return defaultGeneralSettings;
  }
}

export async function loadPageSettings() {
  try {
    // Try to load from CMS content using dynamic import
    const response = await fetch('/content/settings/pages.json');
    if (response.ok) {
      const pageSettings = await response.json();
      return { ...defaultPageSettings, ...pageSettings };
    } else {
      throw new Error('Failed to fetch page settings');
    }
  } catch (error) {
    console.warn('Could not load page settings from CMS, using defaults:', error);
    return defaultPageSettings;
  }
}

export async function loadMetadataSettings() {
  try {
    // Try to load from CMS content using dynamic import
    const response = await fetch('/content/settings/metadata.json');
    if (response.ok) {
      const metadataSettings = await response.json();
      return { ...defaultMetadataSettings, ...metadataSettings };
    } else {
      throw new Error('Failed to fetch metadata settings');
    }
  } catch (error) {
    console.warn('Could not load metadata settings from CMS, using defaults:', error);
    return defaultMetadataSettings;
  }
}

// Helper function to get specific page content
export async function getPageContent(pageName: string) {
  const pageSettings = await loadPageSettings();
  return (pageSettings as any)[pageName] || {};
}

// Helper function to get UI messages
export async function getUIMessages() {
  const pageSettings = await loadPageSettings();
  return pageSettings.ui || {};
}